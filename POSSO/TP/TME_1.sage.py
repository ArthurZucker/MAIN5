

# This file was *autogenerated* from the file TME_1.sage
from sage.all_cmdline import *   # import sage library

_sage_const_1 = Integer(1); _sage_const_3 = Integer(3); _sage_const_2 = Integer(2); _sage_const_0 = Integer(0); _sage_const_4 = Integer(4)
import itertools

print("-------------------- Genérer des monômes --------------------\n")
def generer_monomes(n,d):
  combination = list(itertools.combinations_with_replacement(range(d+_sage_const_1 ), n))
  monomes = []

  for i in range(len(combination)):
    if(sum(combination[i])==d):
      monomes = monomes + list(itertools.permutations(combination[i]))

  res = list(set(monomes))
  if(len(res) == binomial(n+d-_sage_const_1 ,d)):
    print("On a bien généré le bon nombre de monomes")
  return res

n = _sage_const_3 
d = _sage_const_3 
print("Tous les monômes de degré {} en {} variables : ".format(n,d))
res = generer_monomes(n,d)
print(res)


print("\n-------------------- Genérer des monômes 2 --------------------\n")
def generer_monomes_2(n1,d1,n2,d2):
  res3 = []
  res1 = generer_monomes(n1,d1)
  res2 = generer_monomes(n2,d2)
  print(res1)
  print(res2)
  if(n1>n2):
    for i in res1:
      for j in res2:
        temp = list(i)      
        for s in range(n2):
          #[0 2 3 ]
          # ^ = n1-n2
          #[  2 2 ]
          temp[s] += (j[s])
        res3.append(tuple(temp))
  return res3

n1 = _sage_const_3 
d1 = _sage_const_3 
n2 = _sage_const_2 
d2 = _sage_const_2 
res = generer_monomes_2(n1,d1,n2,d2)
print(len(res))

print("Tous les monômes de degré {} en {} variables et {} en {} variables : ".format(n1,d1,n2,d2))
print(res)

print("\n-------------------- Somme de deux polynômes --------------------\n")
# les deux en n variables
def somme_polynômes(p1,p2):
  p3 = []
  coeff = []
  monomes = []
  if(len(p1[_sage_const_0 ])>len(p2[_sage_const_0 ])):
    for i in range(len(p2[_sage_const_0 ])):
      if(p1[_sage_const_1 ][i]==p2[_sage_const_1 ][i]):
        coeff.append(p1[_sage_const_0 ][i]+p2[_sage_const_0 ][i])
        monomes.append(p1[_sage_const_1 ][i])
      else:
        coeff.append(p1[_sage_const_0 ][i])
        monomes.append(p1[_sage_const_1 ][i])
        coeff.append(p2[_sage_const_0 ][i])
        monomes.append(p2[_sage_const_1 ][i])
    monomes = monomes + p1[_sage_const_1 ][len(p2[_sage_const_0 ]):len(p1[_sage_const_0 ])]
    coeff = coeff + p1[_sage_const_0 ][len(p2[_sage_const_0 ]):len(p1[_sage_const_0 ])]
  else:
    for i in range(len(p1[_sage_const_0 ])):
      if(p1[_sage_const_1 ][i]==p2[_sage_const_1 ][i]):
        coeff.append(p1[_sage_const_0 ][i]+p2[_sage_const_0 ][i])
        monomes.append(p1[_sage_const_1 ][i])
      else:
        coeff.append(p1[_sage_const_0 ][i])
        monomes.append(p1[_sage_const_1 ][i])
        coeff.append(p2[_sage_const_0 ][i])
        monomes.append(p2[_sage_const_1 ][i])
    monomes = monomes + p2[_sage_const_1 ][len(p1[_sage_const_0 ]):len(p2[_sage_const_0 ])]
    coeff = coeff + p2[_sage_const_0 ][len(p1[_sage_const_0 ]):len(p2[_sage_const_0 ])]

  p3.append(coeff)
  p3.append(monomes)
  return p3

p1 = [[_sage_const_1 ,_sage_const_2 ,_sage_const_3 ]]
p2 = [[_sage_const_1 ,_sage_const_2 ,_sage_const_3 ,_sage_const_4 ]]
p1.append(generer_monomes(_sage_const_2 ,_sage_const_2 ))
p2.append(generer_monomes(_sage_const_2 ,_sage_const_3 ))

print("p1 = {}".format(p1))
print("p2 = {}".format(p2))

print("Somme de p1 et p2 : ")
p3 = somme_polynômes(p1,p2)
print("p3 = {}".format(p3))

print("\n-------------------- Multiplication de deux polynômes --------------------\n")
import operator

# les deux en n variables
def multiplication_polynômes(p1,p2):
  p3 = []
  coeff = []
  monomes = []
  nb_variable = len(p1[_sage_const_1 ][_sage_const_0 ])
  #print(nb_variable)
  for i in range(len(p1[_sage_const_0 ])):
    for j in range(len(p2[_sage_const_0 ])):
      coeff.append(p1[_sage_const_0 ][i]*p2[_sage_const_0 ][j])
      monomes.append(tuple(map(operator.add, p1[_sage_const_1 ][i], p2[_sage_const_1 ][j])))

  p3.append(coeff)
  p3.append(monomes)
  return p3

p1 = [[_sage_const_1 ,_sage_const_2 ,_sage_const_3 ]]
p2 = [[_sage_const_1 ,_sage_const_2 ,_sage_const_3 ,_sage_const_4 ]]
p1.append(generer_monomes(_sage_const_2 ,_sage_const_2 ))
p2.append(generer_monomes(_sage_const_2 ,_sage_const_3 ))

print("p1 = {}".format(p1))
print("p2 = {}".format(p2))

print("Multiplication de p1 et p2 : ")
p3 = multiplication_polynômes(p1,p2)
print("p3 = {}".format(p3))

