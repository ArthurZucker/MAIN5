

# This file was *autogenerated* from the file TME_2.sage
from sage.all_cmdline import *   # import sage library

_sage_const_0 = Integer(0); _sage_const_20 = Integer(20); _sage_const_2 = Integer(2); _sage_const_6 = Integer(6); _sage_const_4 = Integer(4); _sage_const_3 = Integer(3); _sage_const_1 = Integer(1); _sage_const_5 = Integer(5)###
### Auteurs : Clément Apavou & Arthur Zucker
###

print("\n-------------------- Algorithme d'Euclide sur les entiers --------------------\n")

def Euclide_entier(a,b):
  if(a>b):
    s = a
    t = b
    while(t != _sage_const_0 ):
      r = s % t
      s = t
      t = r
    return s
  else:
    s = b
    t = a
    while(t != _sage_const_0 ):
      r = s % t
      s = t
      t = r
    return s

a = _sage_const_20 
b = _sage_const_2 
res = Euclide_entier(_sage_const_20 ,_sage_const_2 )
print("Le pgcd de {} et {} est {}".format(a,b,res))

print("\n-------------------- Algorithme d'Euclide polynômes --------------------\n")

def Euclide_polynome(A,B):
  S = A
  T = B
  while(T!=_sage_const_0 ):
    R = S % T
    S = T
    T = R
  return S

R = QQ ['x']; (x,) = R._first_ngens(1)
f = _sage_const_6 *x**_sage_const_4  + _sage_const_2 *x**_sage_const_3  + _sage_const_4 *x**_sage_const_2  + x + _sage_const_2 
g = _sage_const_2 *x**_sage_const_3  + x**_sage_const_2  + _sage_const_6 *x + _sage_const_1 

res = Euclide_polynome(f,g)
print("Le pgcd de {} et {} est  {}".format(f,g,res))
print("vérification avec sage : {}".format(f.gcd(g)))
print("\n-------------------- Calcul du resultant --------------------\n")

R = QQ ['x']; (x,) = R._first_ngens(1)
f1 = _sage_const_3 *x**_sage_const_4  + _sage_const_6 *x**_sage_const_3  + _sage_const_2 *x**_sage_const_2  + x + _sage_const_3 
g1 = _sage_const_2 *x**_sage_const_3  + _sage_const_6 *x + _sage_const_1 

A = x**_sage_const_2  - _sage_const_2 *x + _sage_const_1 
B = x**_sage_const_2  - _sage_const_1 

f2 = _sage_const_3 *x**_sage_const_5  + _sage_const_1 *x**_sage_const_4  + _sage_const_4 *x + _sage_const_2 
g2 = _sage_const_2 *x**_sage_const_3  + x**_sage_const_2  + _sage_const_6 *x + _sage_const_1 

def calcul_res(A,B):
  p = A.degree()
  q = B.degree()
  if(A.degree()<B.degree()):
    return calcul_res(B,A)*(-_sage_const_1 )**(p*q)
  if(B.degree() > _sage_const_0 ):
    R = A%B
    rho = R.degree()
    bq = B.leading_coefficient()
    return (-_sage_const_1 )**(p*q) * bq**((p-rho))*calcul_res(B,R)
  else:
    return B**(p)

print("f1 = {}".format(f1))
print("g1 = {}".format(g1))
print("f2 = {}".format(f2))
print("g2 = {}".format(g2))
print("A  = {}".format(A))
print("B  = {}".format(B))
res1 = calcul_res(f1,g1)
res2 = calcul_res(g1,f1)
res3 = calcul_res(A,B)
res4 = calcul_res(B,A)
res5 = calcul_res(f2,g2)
res6 = calcul_res(g2,f2)

print("res(f1,g1) = {}".format(res1))
print("res(g1,f1) = {}".format(res2))
print("res(A,B)   = {}".format(res3))
print("res(B,A)   = {}".format(res4))
print("res(f2,g2) = {}".format(res5))
print("res(g2,f2) = {}".format(res6))

